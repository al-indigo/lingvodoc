upstream gunicorn {
	server unix:/sock/lingvodoc.sock fail_timeout=0;
}


server {
    listen 80;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;

    ssl_certificate conf.d/nginx-selfsigned.crt;
    ssl_certificate_key conf.d/nginx-selfsigned.key;

    root /dist/;
    index index.html index.htm;
    access_log /var/log/nginx/lingvodoc-react-access.log;
    error_log /var/log/nginx/lingvodoc-react-error.log;

    add_header 'Access-Control-Allow-Origin' "*";
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Content-Security-Policy' 'upgrade-insecure-requests';

    proxy_send_timeout         9000s;
    proxy_read_timeout         9000s;
    client_max_body_size 16g;
    keepalive_timeout    30;


    location /objects/ {
      alias /tmp/;
    }

    location ~* \.(?:manifest|appcache|html?|xml|json)$ {
      expires -1;
    }

    # static files
    location ~* \.(?:css|js)$ {
      try_files $uri =404;
      expires 1y;
      access_log off;
      add_header Cache-Control "public";
    }

    # If requested URL has an extension, try to serve
    #it as static file and return 404 if file is unavailable
    location ~ ^/assets/.+\..+$ {
      try_files $uri =404;
    }

    # backend requests
    location /api/ {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;

        proxy_pass http://gunicorn/;
    }

    # If URL doesn't end with extension and is not API request
    # send index.html as response, react-dom-router will take care
    # of the rest.
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Security related options
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options nosniff;
}
